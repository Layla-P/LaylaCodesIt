@page "/blog"
@using GraphQL
@using GraphQL.Client.Http
@using Models

@inject GraphQLHttpClient graphQlClient
@inject NavigationManager navigation
<!-- component -->
@if (blogs == null)
{
	<p>Loading...</p>
}
else
{

	<section class="blog text-gray-700 body-font">
		<div class="container px-5 py-24 mx-auto">
			<div class="flex flex-wrap w-full mb-20 flex-col items-center text-center">
				<h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-gray-900"> Blog</h1>
				<p class="lg:w-1/2 w-full leading-relaxed text-base">
					J'aime bien partager mes connaissances et des recherche intéressantes, pour le faire j'ai mis en place un blog personnel.
					Nous abordons plusieurs sujets intéressants et je donne quelques astuces et conseils aux jeunes développeurs pour mieux s'en sortir.
				</p>
			</div>
			<div class="flex flex-wrap sm:-m-4 -mx-4 -mb-10 -mt-4">
				@foreach (Item item in blogs)
				{
					<div class="p-4 md:w-1/3 md:mb-0 mb-6 flex flex-col justify-center items-center max-w-sm mx-auto">
						<div class="bg-gray-300 h-56 w-full rounded-lg shadow-md bg-cover bg-center" style="background-image: url(https://images.unsplash.com/photo-1521185496955-15097b20c5fe?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1951&q=80)"></div>

						<div class=" w-70 bg-white -mt-10 shadow-lg rounded-lg overflow-hidden p-5">

							<div class="header-content inline-flex ">
								<div class="category-badge flex-1  h-4 w-4 m rounded-full m-1 bg-purple-100">
									<div class="h-2 w-2 rounded-full m-1 bg-purple-500 "></div>
								</div>
								<div class="category-title flex-1 text-sm"> PHP</div>
							</div>
							<div class="title-post font-medium">@item.title</div>
							@item.shortDescription
							<div class="summary-post text-base text-justify">

								<button @onclick="@(e => SelectBlog(item.slug))" class="bg-blue-100 text-blue-500 mt-4 block rounded p-2 text-sm "><span class="">Go to blog</span></button>

							</div>

						</div>
					</div>

				}
				</div>
		</div>
	</section>
}

@code {


	private Item[] blogs = null;



	protected override async Task OnInitializedAsync()
	{


		var res = await GetResponse();

		blogs = res.Data.articleCollection.items;

	}

	//https://graphql.contentful.com/content/v1/spaces/5gi0c2vvptsm/environments/master?access_token=Tk0jMX-Z6addZMiJpd0WR_wN57LBUv6oQOScfU2n3qA

	private void SelectBlog(string slug)
	{
		navigation.NavigateTo($"/blog/{slug}");
	}

	private async Task<GraphQLResponse<data>> GetResponse()
	{

		var articleRequest = new GraphQLRequest
		{
			Query = @"{ 
						articleCollection {
							items{
								title
								slug
								shortDescription
						} }}",
			OperationName = null
		};


		return await graphQlClient.SendQueryAsync<data>(articleRequest);
	}
}
@*{
	  articleCollection {
		items{
		  title
		  sys{
			id
		  }
		}
	  }
	  stefan: articleCollection(where :{
		title : "Dummy title"
	  }){
		items{
		  title
		  sys{
			id
		  }}
	  }
	}*@

@*{

	  stefan: articleCollection(where :{
		slug : "dummy-title"
	  }){
		items{
		  title
		  sys{
			id
		  }}
	  }
	}*@

@*{
	  stefan: articleCollection(where: {slug: "dummy-title"}) {
		items {
		  title
		  sys {
			id
		  }
		  authorsCollection {
		  items{
			name
			twitch
		  }
		}
		}
	  }
	}*@
